import asyncio
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import aiosqlite

API_TOKEN = '7510934024:AAGCo_-J9NoeXegrirP7E7-Ga63HoUkwIr0'
ADMIN_IDS = [7290616621]
ADMIN_CARD = '2200701944367520'
ADMIN_CONTACT = '@r1ck_grimess'

CATEGORIES = ['–û–±—É–≤—å', '–®—Ç–∞–Ω—ã', '–î–∂–∏–Ω—Å—ã', '–§—É—Ç–±–æ–ª–∫–∏', '–ö—É—Ä—Ç–∫–∏', '–î—Ä—É–≥–æ–µ']
TYPES = ['–û—Ä–∏–≥–∏–Ω–∞–ª', '–†–µ–ø–ª–∏–∫–∞']
DELIVERY = ['–°–î–≠–ö', '–Ø–Ω–¥–µ–∫—Å', '–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ (–ú–æ—Å–∫–≤–∞)']

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

class AddProduct(StatesGroup):
    choose_type = State()
    choose_category = State()
    enter_name = State()
    enter_desc = State()
    enter_price = State()
    enter_photo = State()

class MakeOrder(StatesGroup):
    choose_type = State()
    choose_category = State()
    choose_product = State()
    choose_delivery = State()
    enter_contacts = State()
    wait_payment = State()
    wait_screen = State()

def menu_kb(is_admin: bool = False):
    kb = [
        [KeyboardButton(text='üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')],
        [KeyboardButton(text='üõí –ö–∞—Ç–∞–ª–æ–≥')],
        [KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='‚ùì–ü–æ–º–æ—â—å')]
    ]
    if is_admin:
        kb.append([KeyboardButton(text='üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é')])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')],
        [KeyboardButton(text='üì¶ –ó–∞–∫–∞–∑—ã')],
        [KeyboardButton(text='üîô –ù–∞–∑–∞–¥'), KeyboardButton(text='üè† –í –º–µ–Ω—é')]
    ], resize_keyboard=True)

def category_kb():
    kb = [[KeyboardButton(text=cat)] for cat in CATEGORIES]
    kb.append([KeyboardButton(text='üè† –í –º–µ–Ω—é')])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def types_kb():
    kb = [[KeyboardButton(text=t)] for t in TYPES]
    kb.append([KeyboardButton(text='üè† –í –º–µ–Ω—é')])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def delivery_kb():
    kb = [[KeyboardButton(text=d)] for d in DELIVERY]
    kb.append([KeyboardButton(text='üè† –í –º–µ–Ω—é')])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')],
            [KeyboardButton(text='üè† –í –º–µ–Ω—é')]
        ],
        resize_keyboard=True
    )

def back_to_menu_kb(is_admin=False):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='üè† –í –º–µ–Ω—é')]],
        resize_keyboard=True
    )

async def db_init():
    async with aiosqlite.connect('shop.db') as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT, category TEXT, name TEXT, desc TEXT, price INTEGER, photo_id TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER, username TEXT, product_id INTEGER, delivery TEXT,
            contacts TEXT, payment_screen TEXT, status TEXT DEFAULT 'pending'
        )""")
        await db.commit()

def is_menu_command(msg: Message):
    return msg.text and msg.text.lower() in ['üè† –≤ –º–µ–Ω—é', '/menu', '–º–µ–Ω—é', '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']

async def back_to_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))

@router.message(lambda m: is_menu_command(m))
async def catch_menu_cmd(msg: Message, state: FSMContext):
    await back_to_menu(msg, state)

@router.message(Command('menu'))
async def menu_cmd(msg: Message, state: FSMContext):
    await back_to_menu(msg, state)

@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    await state.clear()
    is_admin = msg.from_user.id in ADMIN_IDS
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb(is_admin))

@router.message(F.text == '‚ùì–ü–æ–º–æ—â—å')
async def help_handler(msg: Message):
    await msg.answer(f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞: {ADMIN_CONTACT}", reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))

@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(msg: Message):
    await msg.answer(f"–í–∞—à ID: {msg.from_user.id}\nUsername: @{msg.from_user.username or '–Ω–µ—Ç'}",
                     reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))

@router.message(F.text == 'üõí –ö–∞—Ç–∞–ª–æ–≥')
async def catalog(msg: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{t}", callback_data=f"cat_type_{t.lower()}")] for t in TYPES
        ]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@router.callback_query(F.data.startswith('cat_type_'))
async def catalog_type(call: CallbackQuery):
    t = call.data.split('_')[-1].capitalize()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"cat_{t.lower()}_{cat.lower()}")] for cat in CATEGORIES
        ]
    )
    await call.message.edit_text(f"–¢–æ–≤–∞—Ä—ã: {t}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@router.callback_query(F.data.startswith('cat_'))
async def catalog_category(call: CallbackQuery):
    _, t, cat = call.data.split('_')
    items = []
    async with aiosqlite.connect('shop.db') as db:
        res = await db.execute("SELECT id, name, price FROM products WHERE type=? AND category=?",
                               (t.capitalize(), cat.capitalize()))
        items = await res.fetchall()
    if not items:
        await call.message.edit_text("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=None)
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{name} ({price}‚ÇΩ)", callback_data=f"show_{pid}")]
            for pid, name, price in items
        ]
    )
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@router.callback_query(F.data.startswith('show_'))
async def show_catalog_product(call: CallbackQuery):
    pid = int(call.data.split('_')[1])
    async with aiosqlite.connect('shop.db') as db:
        res = await db.execute("SELECT name, desc, price, photo_id FROM products WHERE id=?", (pid,))
        row = await res.fetchone()
    if row:
        name, desc, price, photo_id = row
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{pid}")]
            ]
        )
        await call.message.answer_photo(photo_id, caption=f"<b>{name}</b>\n{desc}\n–¶–µ–Ω–∞: {price}‚ÇΩ",
                                        parse_mode='HTML', reply_markup=kb)
    else:
        await call.message.answer("–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_menu_kb())

@router.callback_query(F.data.startswith('order_'))
async def start_order_callback(call: CallbackQuery, state: FSMContext):
    pid = int(call.data.split('_')[1])
    await state.clear()
    await state.set_state(MakeOrder.choose_delivery)
    await state.update_data(product_id=pid)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_kb())

@router.message(F.text == 'üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def order_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=types_kb())
    await state.set_state(MakeOrder.choose_type)

@router.message(StateFilter(MakeOrder.choose_type))
async def order_choose_type(msg: Message, state: FSMContext):
    if is_menu_command(msg):
        await back_to_menu(msg, state)
        return
    if msg.text not in TYPES:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=types_kb())
    await state.update_data(type=msg.text)
    await state.set_state(MakeOrder.choose_category)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb())

@router.message(StateFilter(MakeOrder.choose_category))
async def order_choose_cat(msg: Message, state: FSMContext):
    if is_menu_command(msg):
        await back_to_menu(msg, state)
        return
    if msg.text not in CATEGORIES:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=category_kb())
    await state.update_data(category=msg.text)
    async with aiosqlite.connect('shop.db') as db:
        data = await state.get_data()
        res = await db.execute("SELECT id, name, price FROM products WHERE type=? AND category=?",
                               (data['type'], msg.text))
        products = await res.fetchall()
    if not products:
        await msg.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))
        await state.clear()
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{name} ({price}‚ÇΩ)", callback_data=f"makeorder_{pid}")]
            for pid, name, price in products
        ]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

# ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
# 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
@router.callback_query(StateFilter(MakeOrder.choose_category), F.data.startswith('makeorder_'))
async def show_product_to_buyer(call: CallbackQuery, state: FSMContext):
    pid = int(call.data.split('_')[1])
    async with aiosqlite.connect('shop.db') as db:
        res = await db.execute("SELECT name, desc, price, photo_id FROM products WHERE id=?", (pid,))
        row = await res.fetchone()
    if not row:
        await call.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name, desc, price, photo_id = row

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}")]
        ]
    )

    await call.message.answer_photo(
        photo_id,
        caption=f"<b>{name}</b>\n{desc}\n–¶–µ–Ω–∞: {price}‚ÇΩ",
        parse_mode="HTML",
        reply_markup=kb
    )

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–ö—É–ø–∏—Ç—å¬ª ‚Äî —Å—Ç–∞—Ä—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(StateFilter(MakeOrder.choose_category), F.data.startswith('buy_'))
async def start_order_after_photo(call: CallbackQuery, state: FSMContext):
    pid = int(call.data.split('_')[1])
    await state.update_data(product_id=pid)
    await state.set_state(MakeOrder.choose_delivery)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_kb())

# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º: —É–¥–∞–ª—è–µ–º "–û—Ä–∏–≥–∏–Ω–∞–ª", –æ—Å—Ç–∞–≤–ª—è–µ–º "–†–µ–ø–ª–∏–∫–∞", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data.startswith('admin_confirm_'))
async def admin_confirm_order(call: CallbackQuery):
    order_id = int(call.data.split('_')[-1])
    async with aiosqlite.connect('shop.db') as db:
        res = await db.execute("SELECT product_id FROM orders WHERE id=?", (order_id,))
        product_res = await res.fetchone()
        product_id = product_res[0] if product_res else None

        product_type, photo_id, product_name = None, None, None
        if product_id:
            res = await db.execute("SELECT type, photo_id, name FROM products WHERE id=?", (product_id,))
            prod_info = await res.fetchone()
            if prod_info:
                product_type, photo_id, product_name = prod_info

        await db.execute("UPDATE orders SET status='confirmed' WHERE id=?", (order_id,))
        await db.commit()
        res = await db.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
        user = await res.fetchone()

        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
        if product_type == "–û—Ä–∏–≥–∏–Ω–∞–ª":
            await db.execute("DELETE FROM products WHERE id=?", (product_id,))
            await db.commit()

    await call.message.delete()
    await call.message.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
    if user and user[0]:
        try:
            if photo_id:
                await call.bot.send_photo(
                    user[0],
                    photo_id,
                    caption=f"–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–¢–æ–≤–∞—Ä: {product_name}\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."
                )
            else:
                await call.bot.send_message(
                    user[0],
                    "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
# ========== /–ö–û–ù–ï–¶ –ë–õ–û–ö–ê ==========

@router.message(StateFilter(MakeOrder.choose_delivery))
async def order_delivery(msg: Message, state: FSMContext):
    if is_menu_command(msg):
        await back_to_menu(msg, state)
        return
    if msg.text not in DELIVERY:
        return await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.", reply_markup=delivery_kb())
    await state.update_data(delivery=msg.text)
    await state.set_state(MakeOrder.enter_contacts)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (username, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–ø.):", reply_markup=cancel_kb())

@router.message(StateFilter(MakeOrder.enter_contacts))
async def order_contacts(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    await state.update_data(contacts=msg.text)
    await state.set_state(MakeOrder.wait_payment)
    await msg.answer(
        f"–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –∫–∞—Ä—Ç–µ <code>{ADMIN_CARD}</code> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.",
        parse_mode='HTML', reply_markup=cancel_kb()
    )

@router.message(StateFilter(MakeOrder.wait_payment), F.photo)
async def order_payment_screen(msg: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get('product_id') or not data.get('delivery') or not data.get('contacts'):
        await msg.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))
        await state.clear()
        return
    async with aiosqlite.connect('shop.db') as db:
        await db.execute(
            "INSERT INTO orders (user_id, username, product_id, delivery, contacts, payment_screen, status) "
            "VALUES (?, ?, ?, ?, ?, ?, 'pending')",
            (msg.from_user.id, msg.from_user.username, data['product_id'], data['delivery'], data['contacts'], msg.photo[-1].file_id)
        )
        await db.commit()
    await msg.answer(
        f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_CONTACT}.",
        reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS)
    )
    await bot.send_message(
        ADMIN_IDS[0],
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{msg.from_user.username}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contacts']}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üì¶ –ó–∞–∫–∞–∑—ã –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.",
    )
    await bot.send_photo(ADMIN_IDS[0], msg.photo[-1].file_id)
    await state.clear()

@router.message(StateFilter(MakeOrder.wait_payment))
async def order_payment_text(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=cancel_kb())

@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')
async def user_add_order(msg: Message):
    await msg.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
                     reply_markup=menu_kb(msg.from_user.id in ADMIN_IDS))

@router.message(F.text == 'üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é', F.from_user.id.in_(ADMIN_IDS))
async def admin_menu(msg: Message):
    await msg.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_kb())

@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', F.from_user.id.in_(ADMIN_IDS))
async def admin_add_product(msg: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AddProduct.choose_type)
    await msg.answer("–¢–∏–ø —Ç–æ–≤–∞—Ä–∞?", reply_markup=types_kb())

@router.message(StateFilter(AddProduct.choose_type))
async def prod_type(msg: Message, state: FSMContext):
    if is_menu_command(msg):
        await back_to_menu(msg, state)
        return
    if msg.text not in TYPES:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=types_kb())
    await state.update_data(type=msg.text)
    await state.set_state(AddProduct.choose_category)
    await msg.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞?", reply_markup=category_kb())

@router.message(StateFilter(AddProduct.choose_category))
async def prod_cat(msg: Message, state: FSMContext):
    if is_menu_command(msg):
        await back_to_menu(msg, state)
        return
    if msg.text not in CATEGORIES:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=category_kb())
    await state.update_data(category=msg.text)
    await state.set_state(AddProduct.enter_name)
    await msg.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())

@router.message(StateFilter(AddProduct.enter_name))
async def prod_name(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    await state.update_data(name=msg.text)
    await state.set_state(AddProduct.enter_desc)
    await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())

@router.message(StateFilter(AddProduct.enter_desc))
async def prod_desc(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    await state.update_data(desc=msg.text)
    await state.set_state(AddProduct.enter_price)
    await msg.answer("–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=cancel_kb())

@router.message(StateFilter(AddProduct.enter_price))
async def prod_price(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    try:
        price = int(msg.text)
    except Exception:
        return await msg.answer("–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ!", reply_markup=cancel_kb())
    await state.update_data(price=price)
    await state.set_state(AddProduct.enter_photo)
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())

@router.message(StateFilter(AddProduct.enter_photo), F.photo)
async def prod_photo(msg: Message, state: FSMContext):
    data = await state.get_data()
    async with aiosqlite.connect('shop.db') as db:
        await db.execute(
            "INSERT INTO products (type, category, name, desc, price, photo_id) VALUES (?, ?, ?, ?, ?, ?)",
            (data['type'], data['category'], data['name'], data['desc'], data['price'], msg.photo[-1].file_id)
        )
        await db.commit()
    await msg.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_kb())
    await state.clear()

@router.message(StateFilter(AddProduct.enter_photo))
async def prod_photo_wrong(msg: Message, state: FSMContext):
    if is_menu_command(msg) or msg.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await back_to_menu(msg, state)
        return
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=cancel_kb())

@router.message(F.text == 'üì¶ –ó–∞–∫–∞–∑—ã', F.from_user.id.in_(ADMIN_IDS))
async def admin_orders(msg: Message):
    async with aiosqlite.connect('shop.db') as db:
        res = await db.execute(
            "SELECT o.id, o.user_id, o.username, p.name, o.delivery, o.contacts, o.status, o.payment_screen "
            "FROM orders o LEFT JOIN products p ON o.product_id = p.id ORDER BY o.status DESC, o.id DESC"
        )
        orders = await res.fetchall()
    if not orders:
        await msg.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=admin_kb())
        return
    for o in orders:
        kb = None
        if o[6] == 'pending':
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{o[0]}")]
                ]
            )
        txt = (
            f"–ó–∞–∫–∞–∑ #{o[0]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {o[2]}\n–¢–æ–≤–∞—Ä: {o[3]}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {o[4]}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {o[5]}\n–°—Ç–∞—Ç—É—Å: {o[6]}"
        )
        await msg.answer_photo(o[7], txt, reply_markup=kb)

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back(msg: Message, state: FSMContext):
    await back_to_menu(msg, state)

async def main():
    await db_init()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())